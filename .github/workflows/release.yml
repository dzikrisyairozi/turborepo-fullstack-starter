name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run quality checks
        run: |
          pnpm run type-check
          pnpm run lint:check
          pnpm run format:check
          pnpm run test

      - name: Build application
        run: pnpm run build

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Generate changelog from commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save changelog to file
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION" >> CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          name: Release ${{ steps.changelog.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            dist/**/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(steps.changelog.outputs.version, '-') }}

      - name: Build Docker image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Create a simple Dockerfile if it doesn't exist
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile << 'EOF'
          FROM node:20-alpine

          WORKDIR /app

          # Copy package files
          COPY package*.json pnpm-lock.yaml ./

          # Install pnpm and dependencies
          RUN npm install -g pnpm
          RUN pnpm install --frozen-lockfile --prod

          # Copy built application
          COPY dist/ ./dist/

          # Expose port
          EXPOSE 3000

          # Start the application
          CMD ["node", "dist/main"]
          EOF
          fi

          # Build and tag Docker image
          docker build -t ${{ github.repository }}:${{ steps.changelog.outputs.version }} .
          docker build -t ${{ github.repository }}:latest .

      - name: Deploy to production
        if: ${{ !contains(steps.changelog.outputs.version, '-') }}
        run: |
          echo "Deploying release ${{ steps.changelog.outputs.version }} to production..."
          # Add your production deployment commands here
          # Examples:
          # - Deploy Docker image to registry
          # - Update Kubernetes deployments
          # - Deploy to cloud providers

      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            ðŸš€ New release deployed!
            Version: ${{ steps.changelog.outputs.version }}
            Repository: ${{ github.repository }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always() && env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
